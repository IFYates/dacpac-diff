using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace DacpacDiff.Core.Parser.Tests
{
    [TestClass()]
    public class DacpacSchemeParserTests
    {
        [TestMethod]
        public void ParseFile__Blank_returns_blank_scheme()
        {
            // Arrange
            var parser = new DacpacSchemeParser();

            // Act
            var res = parser.ParseFile("blank.dacpac");

            // Assert
            Assert.AreEqual("blank", res.Name);
            Assert.AreEqual("dbo", res.Databases.Values.Single().Schemas.Keys.Single());
            Assert.AreEqual(0, res.Databases.Values.Single().Schemas["dbo"].Modules.Count);
            Assert.AreEqual(0, res.Databases.Values.Single().Schemas["dbo"].Tables.Count);
        }
        
        [TestMethod]
        public void ParseContent__Parses_schemas()
        {
            // Arrange
            var xml = @"<root><Model>
    <Element Type=""SqlSchema"" Name=""dbo"" />
    <Element Type=""SqlSchema"" Name=""schema2"" />
    <Element Type=""SqlSchema"" Name=""schema3"" />
</Model></root>";

            // Act
            var res = DacpacSchemeParser.ParseContent("test", xml);
            var db = res.Databases["database"];

            // Assert
            Assert.AreEqual(3, db.Schemas.Count);
            Assert.IsTrue(db.Schemas.ContainsKey("dbo"));
            Assert.IsTrue(db.Schemas.ContainsKey("schema2"));
            Assert.IsTrue(db.Schemas.ContainsKey("schema3"));
        }
        
        [TestMethod]
        public void ParseContent__Parses_tables_and_fields()
        {
            // Arrange
            var xml = @"<root><Model>
    <Element Type=""SqlTable"" Name=""[dbo].[Test]"">
        <Element Type=""SqlSimpleColumn"" Name=""[dbo].[Test].[ColA]"">
            <Element Type=""SqlTypeSpecifier"">
                <Relationship Name=""Type""><Entry><References Name=""varchar"" /></Entry></Relationship>
            </Element>
        </Element>
    </Element>
</Model></root>";

            // Act
            var res = DacpacSchemeParser.ParseContent("test", xml);
            var sch = res.Databases["database"].Schemas["dbo"];

            // Assert
            Assert.AreEqual("Test", sch.Tables.Keys.Single());
            Assert.AreEqual("ColA", sch.Tables["Test"].Fields.Single().Name);
        }
        
        [TestMethod]
        public void ParseContent__Parses_temporal_tables()
        {
            // Arrange
            var xml = @"<root><Model>
    <Element Type=""SqlTable"" Name=""[dbo].[Test]"">
        <Element Type=""SqlSimpleColumn"" Name=""[dbo].[Test].[ColA]"">
            <Element Type=""SqlTypeSpecifier"">
                <Relationship Name=""Type""><Entry><References Name=""varchar"" /></Entry></Relationship>
            </Element>
            <Property Name=""GeneratedAlwaysType"" Value=""1"" />
        </Element>
        <Element Type=""SqlSimpleColumn"" Name=""[dbo].[Test].[ColB]"">
            <Element Type=""SqlTypeSpecifier"">
                <Relationship Name=""Type""><Entry><References Name=""varchar"" /></Entry></Relationship>
            </Element>
            <Property Name=""GeneratedAlwaysType"" Value=""2"" />
        </Element>
        <Relationship Name=""TemporalSystemVersioningHistoryTable"">
            <Entry><References Name=""[audit].[Test]"" /></Entry>
        </Relationship>
    </Element>
</Model></root>";

            // Act
            var res = DacpacSchemeParser.ParseContent("test", xml);
            var sch = res.Databases["database"].Schemas["dbo"];
            var tbl = sch.Tables["Test"];

            // Assert
            Assert.AreEqual("[audit].[Test]", tbl.Temporality.HistoryTable);
            Assert.AreEqual("ColA", tbl.Temporality.PeriodFieldFrom);
            Assert.AreEqual("ColB", tbl.Temporality.PeriodFieldTo);
        }
        
        [TestMethod]
        public void ParseContent__Ignores_history_tables()
        {
            // Arrange
            var xml = @"<root><Model>
    <Element Type=""SqlTable"" Name=""[dbo].[Test]"">
        <Property Name=""IsAutoGeneratedHistoryTable"" Value=""True"" />
    </Element>
</Model></root>";

            // Act
            var res = DacpacSchemeParser.ParseContent("test", xml);
            var sch = res.Databases["database"].Schemas["dbo"];

            // Assert
            Assert.AreEqual(0, sch.Tables.Count);
        }
    }
}